<?php

print('<a href="http://php.manual/classes_and_objects/index.php">Back</a>');
echo '<br><br>';

class SimpleClass
{
  public $var = 'значение по умолчанию';

  public function displayVar()
  {
    echo $this->var;
  }
}

echo '<br>';

class A
{
  function foo()
  {
    if (isset($this)) {
      echo 'Переменная $this определена (';
      echo get_class($this);
      echo '<br>';
    } else {
      echo "Переменная \$this не определена.\n";
    }
  }
}

class B
{
  function bar()
  {
//    A::foo();
  }
}

$a = new A();
$a->foo();
//A::foo();
$b = new B();
$b->bar();
//B::bar();


// Классы только для чтения

//readonly class Foo {}

echo '<br>';

//readonly class Foo
//{
//  public $bar;
//}

//readonly class Foo2{
//  public static int $bar;
//}


// Ключевое слово new

$instance = new SimpleClass();
$className = 'SimpleClass';
$instance = new $className();

// Пример новых объектов, которые создали через произвольные выражения

class ClassA extends \stdClass{}
class ClassB extends \stdClass{}
class ClassC extends ClassB{}
class ClassD extends ClassA{}

function getSomeClass(): string
{
  return 'ClassA';
}

var_dump(new(getSomeClass()));
var_dump(new('Class' . 'B'));
var_dump(new('Class' . 'C'));
var_dump(new(ClassA::class));

// Присваивание объекта

echo '<br>';
$instance2 = new SimpleClass();
$assigned = $instance2;
$reference =& $instance2;
$instance2->var = 'У экземпляра класса, который содержит переменная $assigned, тоже будет это значение';
$instance2 = null;

var_dump($instance2);       // null
var_dump($reference);       // null
var_dump($assigned);        // object(SimpleClass)[3] public 'var' => string 'У экземпляра
// класса, который содержит переменная $assigned, тоже будет это значение' (length=145)

// Новые объекты

echo '<br>';

class Test
{
  public static function getNew()
  {
    return new static();
  }
}

class Child extends Test{}

$obj1 = new Test();           // по имени класса
$obj2 = new $obj1();          // через переменную, которая содержит объект
var_dump($obj1 !== $obj2);        // true
$obj3 = Test::getNew();       // через метод класса
var_dump($obj3 instanceof Test);  // true
$obj4 = Child::getNew();      // через метод класса-наследника
var_dump($obj4 instanceof Child); // true

// Доступ к свойствам и методам только что созданного объекта
echo '<br>';
echo (new DateTime())->format('Y-m-d H:i:s');


/*===Свойства и методы===*/

//  Сравнение доступа к свойству и вызова метода
echo '<hr>';

class Foo
{
  public $bar = 'свойство?';

  public function bar()
  {
    return 'метод!';
  }
}

$obj = new Foo();
echo $obj->bar, PHP_EOL, $obj->bar(), PHP_EOL;

//  Вызов анонимной функции, которую содержит свойство
echo '<br>';

class Foo2
{
  public $bar;

  public function __construct()
  {
    $this->bar = function () {
      return 42;
    };
  }
}

$obj = new Foo2();
echo ($obj->bar)(), PHP_EOL;


/*===Ключевое слово extends===*/

echo '<hr>';
class ExtendClass extends SimpleClass{
  function displayVar()
  {
    echo "Расширенный класс <br>";
    parent::displayVar(); // TODO: Change the autogenerated stub
  }
}
$extended = new ExtendClass();
$extended->displayVar();


/*===Правила совместимости сигнатур===*/

echo '<hr>';

class Base
{
  public function foo(int $a)
  {
    echo "Допустимо\n";
  }
}

class Extends1 extends Base
{
  function foo(int $a = 5)
  {
    parent::foo($a);
  }
}

class Extends2 extends Base
{
  function foo(int $a, $b = 5)
  {
    parent::foo($a);
  }
}

$extends1 = new Extends1();
$extends1->foo();
$extends2 = new Extends2();
$extends2->foo(1);

// Фатальная ошибка, когда дочерний метод удаляет параметр
//echo '<br>';
//class Base2
//{
//  public function foo(int $a = 5)
//  {
//    echo "Допустимо\n";
//  }
//}
//
//class Extend2 extends Base2
//{
//  function foo()
//  {
//    parent::foo(1);
//  }
//}


// Фатальная ошибка, когда дочерний метод делает необязательный параметр обязательным
//echo '<br>';
//class Base3
//{
//  public function foo(int $a = 5)
//  {
//    echo "Допустимо\n";
//  }
//}
//
//class Extend3 extends Base3
//{
//  function foo(int $a)
//  {
//    parent::foo($a);
//  }
//}

//Ошибка передачи именованных аргументов в параметры, которые переименовали в дочернем классе
//echo '<br>';
//class A2
//{
//  public function test($foo, $bar){}
//}
//
//class B2 extends A2
//{
//  public function test($a, $b){}
//}
//
//$obj = new B2();
//$obj->test(foo: "foo", bar: "bar");


/*===Константа ::class===*/

echo '<hr>';

//namespace NS {
//  class ClassName { }
//  echo ClassName::class;
//}

class ClassName { }
echo ClassName::class;

//Разрешение имени несуществующего класса
echo '<br>';
print Does\Not\Exist::class;


/*===Методы и свойства Nullsafe===*/

echo '<hr>';
$result = $repository?->getUser(5)?->name;

if (is_null($repository)) {
  $result = null;
} else {
  $user = $repository->getUser(5);

  if (is_null($user)) {
    $result = null;
  } else {
    $result = $user->name;
  }
}
